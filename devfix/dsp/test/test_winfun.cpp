//
// Created by core on 7/15/20.
//


#if CPPLIBS_ENABLE_DSP_TESTS == 1

#include <catch2/catch.hpp>
#include <iostream>
#include "../../../testutil.h"
#include "../window.h"
#include "../winfun.h"

using namespace devfix::base;
using namespace devfix::dsp;

template<typename FloatT>
std::vector<FloatT> get_win_vals(const window<FloatT>& win)
{
	std::vector<FloatT> vec(win.size(), FloatT(1));
	win.apply(vec);
	return vec;
}

TEST_CASE("devfix/dsp/winfun/hanning/gain")
{
	auto test = [] < typename FloatT > (FloatT
	_, std::size_t
	n)
	{
		window<FloatT> win(winfun<FloatT>::hanning, n, true);
		auto vals = get_win_vals(win);
		auto gain = std::accumulate(vals.begin(), vals.end(), FloatT(0)) / vals.size();
		CHECK(gain == Approx(FloatT(1)).margin(testutil::MARGIN_FINE));
	};
	for (std::size_t n = 4; n <= (1u << 16u); n <<= 1u)
	{
		test((float) (1), n);
		test((double) (1), n);
		test((long double) (1), n);
	}
}

TEST_CASE("devfix/dsp/winfun/hanning/small")
{
	auto test = [] < typename FloatT > (FloatT
	_)
	{
		const std::vector<FloatT> expected = {
			0, 0.188255099070633, 0.611260466978157, 0.950484433951210, 0.950484433951210, 0.611260466978157, 0.188255099070633, 0
		};
		window<FloatT> win(winfun<FloatT>::hanning, expected.size(), false);
		auto vals = get_win_vals(win);
		testutil::check_equals(vals, expected, testutil::MARGIN_FINE);
	};
	test((float) (1));
	test((double) (1));
	test((long double) (1));
}

TEST_CASE("devfix/dsp/winfun/hanning/large")
{
	auto test = [] < typename FloatT > (FloatT
	_)
	{
		const std::vector<FloatT> expected = {
			0, 0.000151774011064, 0.000607003902855, 0.001365413307106, 0.002426541796468, 0.003789745164032, 0.005454195814427,
			0.007418883266247, 0.009682614765511, 0.012244016009782, 0.015101531982495, 0.018253427897008, 0.021697790249780,
			0.025432527982049, 0.029455373749314, 0.033763885297822, 0.038355446947255, 0.043227271178700, 0.048376400326936,
			0.053799708376026, 0.059493902857108, 0.065455526847236, 0.071680961068069, 0.078166426083117, 0.084907984592225,
			0.091901543821889, 0.099142858009967, 0.106627530983258, 0.114351018826410, 0.122308632640503, 0.130495541389670,
			0.138906774833995, 0.147537226546926, 0.156381657015369, 0.165434696820571, 0.174690849897879, 0.184144496873374,
			0.193789898475375, 0.203621199018723, 0.213632429959747, 0.223817513519747, 0.234170266374782, 0.244684403409547,
			0.255353541533038, 0.266171203553707, 0.277130822111731, 0.288225743666038, 0.299449232533641, 0.310794474978845,
			0.322254583349841, 0.333822600260170, 0.345491502812526, 0.357254206862329, 0.369103571318480, 0.381032402478691,
			0.393033458396751, 0.405099453279087, 0.417223061907935, 0.429396924088454, 0.441613649117072, 0.453865820268349,
			0.466145999297646, 0.478446730956852, 0.490760547520435, 0.503079973319069, 0.515397529278085, 0.527705737457985,
			0.539997125594271, 0.552264231633827, 0.564499608265101, 0.576695827439343, 0.588845484880134, 0.600941204578505,
			0.612975643270874, 0.624941494897115, 0.636831495036041, 0.648638425315601, 0.660355117795127, 0.671974459316964,
			0.683489395824836, 0.694892936646340, 0.706178158736952, 0.717338210882982, 0.728366317860920, 0.739255784550643,
			0.750000000000000, 0.760592441438293, 0.771026678236225, 0.781296375809912, 0.791395299466580, 0.801317318189628,
			0.811056408360737, 0.820606657416789, 0.829962267439361, 0.839117558674617, 0.848066972981463, 0.856805077205876,
			0.865326566479347, 0.873626267439445, 0.881699141370551, 0.889540287262835, 0.897144944787643, 0.904508497187474,
			0.911626474078794, 0.918494554165989, 0.925108567864807, 0.931464499833695, 0.937558491411496, 0.943386842960031,
			0.948946016110129, 0.954232635909762, 0.959243492872962, 0.963975544928287, 0.968425919265655, 0.972591914080410,
			0.976471000213578, 0.980060822687314, 0.983359202134594, 0.986364136122302, 0.989073800366903, 0.991486549841951,
			0.993600919776785, 0.995415626545780, 0.996929568447637, 0.998141826374215, 0.999051664368522, 0.999658530071512,
			0.999962055057415, 0.999962055057415, 0.999658530071512, 0.999051664368522, 0.998141826374215, 0.996929568447637,
			0.995415626545780, 0.993600919776785, 0.991486549841951, 0.989073800366903, 0.986364136122302, 0.983359202134594,
			0.980060822687314, 0.976471000213578, 0.972591914080410, 0.968425919265655, 0.963975544928287, 0.959243492872962,
			0.954232635909762, 0.948946016110129, 0.943386842960031, 0.937558491411496, 0.931464499833695, 0.925108567864807,
			0.918494554165989, 0.911626474078794, 0.904508497187474, 0.897144944787643, 0.889540287262835, 0.881699141370551,
			0.873626267439445, 0.865326566479347, 0.856805077205876, 0.848066972981463, 0.839117558674617, 0.829962267439361,
			0.820606657416789, 0.811056408360737, 0.801317318189628, 0.791395299466580, 0.781296375809912, 0.771026678236225,
			0.760592441438293, 0.750000000000000, 0.739255784550643, 0.728366317860920, 0.717338210882982, 0.706178158736952,
			0.694892936646340, 0.683489395824836, 0.671974459316964, 0.660355117795127, 0.648638425315601, 0.636831495036041,
			0.624941494897115, 0.612975643270874, 0.600941204578505, 0.588845484880134, 0.576695827439343, 0.564499608265101,
			0.552264231633827, 0.539997125594271, 0.527705737457985, 0.515397529278085, 0.503079973319069, 0.490760547520435,
			0.478446730956852, 0.466145999297646, 0.453865820268349, 0.441613649117072, 0.429396924088454, 0.417223061907935,
			0.405099453279087, 0.393033458396751, 0.381032402478691, 0.369103571318480, 0.357254206862329, 0.345491502812526,
			0.333822600260170, 0.322254583349841, 0.310794474978845, 0.299449232533641, 0.288225743666038, 0.277130822111731,
			0.266171203553707, 0.255353541533038, 0.244684403409547, 0.234170266374782, 0.223817513519747, 0.213632429959747,
			0.203621199018723, 0.193789898475375, 0.184144496873374, 0.174690849897879, 0.165434696820571, 0.156381657015369,
			0.147537226546926, 0.138906774833995, 0.130495541389670, 0.122308632640503, 0.114351018826410, 0.106627530983258,
			0.099142858009967, 0.091901543821889, 0.084907984592225, 0.078166426083117, 0.071680961068069, 0.065455526847236,
			0.059493902857108, 0.053799708376026, 0.048376400326936, 0.043227271178700, 0.038355446947255, 0.033763885297822,
			0.029455373749314, 0.025432527982049, 0.021697790249780, 0.018253427897008, 0.015101531982495, 0.012244016009782,
			0.009682614765511, 0.007418883266247, 0.005454195814427, 0.003789745164032, 0.002426541796468, 0.001365413307106,
			0.000607003902855, 0.000151774011064, 0
		};
		window<FloatT> win(winfun<FloatT>::hanning, expected.size(), false);
		auto vals = get_win_vals(win);
		testutil::check_equals(vals, expected, testutil::MARGIN_FINE);
	};
	test((float) (1));
	test((double) (1));
	test((long double) (1));
}

#endif
